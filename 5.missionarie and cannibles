
from collections import deque

def is_valid(state, max_missionaries, max_cannibals):
    m1, c1, m2, c2, boat = state
    if m1 < 0 or m2 < 0 or c1 < 0 or c2 < 0:
        return False
    if m1 > max_missionaries or m2 > max_missionaries or c1 > max_cannibals or c2 > max_cannibals:
        return False
    if (m1 > 0 and m1 < c1) or (m2 > 0 and m2 < c2):
        return False
    return True

def get_successors(state, max_missionaries, max_cannibals):
    m1, c1, m2, c2, boat = state
    moves = []
    if boat == 1:
        for m, c in [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]:
            new_state = (m1 - m, c1 - c, m2 + m, c2 + c, 0)
            if is_valid(new_state, max_missionaries, max_cannibals):
                moves.append(new_state)
    else:
        for m, c in [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]:
            new_state = (m1 + m, c1 + c, m2 - m, c2 - c, 1)
            if is_valid(new_state, max_missionaries, max_cannibals):
                moves.append(new_state)
    return moves

def missionaries_cannibals_solver(max_missionaries, max_cannibals):
    start = (max_missionaries, max_cannibals, 0, 0, 1)
    goal = (0, 0, max_missionaries, max_cannibals, 0)
    queue = deque([(start, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()
        if current_state in visited:
            continue
        
        visited.add(current_state)
        path = path + [current_state]
        
        if current_state == goal:
            return path
        
        for next_state in get_successors(current_state, max_missionaries, max_cannibals):
            if next_state not in visited:
                queue.append((next_state, path))
    
    return None

def print_solution(solution):
    for state in solution:
        print(f"Left bank: M={state[0]}, C={state[1]} | Right bank: M={state[2]}, C={state[3]} | Boat on {'left' if state[4] == 1 else 'right'}")

# Example usage
max_missionaries = 3
max_cannibals = 3
solution = missionaries_cannibals_solver(max_missionaries, max_cannibals)

if solution:
    print("Solution found:")
    print_solution(solution)
else:
    print("No solution found.")
