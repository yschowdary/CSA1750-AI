import random

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows
    for row in board:
        if all(s == player for s in row):
            return True
    # Check columns
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    # Check diagonals
    if all(board[i][i] == player for i in range(3)):
        return True
    if all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def check_draw(board):
    return all(cell != ' ' for row in board for cell in row)

def minimax(board, depth, is_maximizing):
    if check_winner(board, 'X'):
        return 10 - depth
    if check_winner(board, 'O'):
        return depth - 10
    if check_draw(board):
        return 0

    if is_maximizing:
        best_score = -float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'X'
                    score = minimax(board, depth + 1, False)
                    board[row][col] = ' '
                    best_score = max(score, best_score)
        return best_score
    else:
        best_score = float('inf')
        for row in range(3):
            for col in range(3):
                if board[row][col] == ' ':
                    board[row][col] = 'O'
                    score = minimax(board, depth + 1, True)
                    board[row][col] = ' '
                    best_score = min(score, best_score)
        return best_score

def find_best_move(board):
    best_score = -float('inf')
    best_move = None
    for row in range(3):
        for col in range(3):
            if board[row][col] == ' ':
                board[row][col] = 'X'
                score = minimax(board, 0, False)
                board[row][col] = ' '
                if score > best_score:
                    best_score = score
                    best_move = (row, col)
    return best_move

def tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    players = ['X', 'O']
    current_player = 'X'  # X is the computer, O is the human

    while True:
        print_board(board)

        if current_player == 'X':
            print("Computer's turn.")
            move = find_best_move(board)
            if move:
                board[move[0]][move[1]] = 'X'
        else:
            print("Your turn.")
            while True:
                try:
                    row, col = map(int, input("Enter row and column (0, 1, or 2) separated by space: ").split())
                    if board[row][col] == ' ':
                        board[row][col] = 'O'
                        break
                    else:
                        print("Cell already taken, choose another one.")
                except (ValueError, IndexError):
                    print("Invalid input, please enter row and column as two numbers between 0 and 2 separated by space.")

        if check_winner(board, 'X'):
            print_board(board)
            print("Computer wins!")
            break
        if check_winner(board, 'O'):
            print_board(board)
            print("You win!")
            break
        if check_draw(board):
            print_board(board)
            print("The game is a draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

# Start the game
tic_tac_toe()
